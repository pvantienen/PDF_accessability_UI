version: 0.2
env:
  variables:
    NODE_VERSION: "18"
    # These should be passed in from CodeBuild environment variables
    # AWS_ACCOUNT: will be set by CodeBuild project
    # AWS_REGION: will be set by CodeBuild project
    # PROJECT_NAME: will be set by CodeBuild project
phases:
  install:
    runtime-versions:
      nodejs: $NODE_VERSION
    commands:
      - echo "üöÄ Installing dependencies for deployment"
      - npm install -g aws-cdk
      - aws --version
      - echo "üì¶ CDK version $(cdk --version)"
  pre_build:
    commands:
      - echo "üèóÔ∏è Setting up CDK environment..."
      # Verify required environment variables
      - |
        if [ -z "$AWS_ACCOUNT" ] || [ -z "$AWS_REGION" ] || [ -z "$PROJECT_NAME" ]; then
          echo "‚ùå Missing required environment variables"
          echo "AWS_ACCOUNT: $AWS_ACCOUNT"
          echo "AWS_REGION: $AWS_REGION"
          echo "PROJECT_NAME: $PROJECT_NAME"
          exit 1
        fi
      # Create .env file with the described format (including dummy backend vars)
      - echo "üìÅ Changing to CDK directory..."
      - cd cdk_backend
      - echo "AWS_ACCOUNT=$AWS_ACCOUNT" > .env
      - echo "AWS_REGION=$AWS_REGION" >> .env
      # Add dummy backend environment variables to bypass validation
      - echo "AMPLIFY_URL=https://dummy-amplify-url.amplifyapp.com" >> .env
      - echo "AMPLIFY_APP_ID=dummy-amplify-app-id" >> .env
      - echo "PDF_TO_PDF_BUCKET_ARN=arn:aws:s3:::dummy-pdf-to-pdf-bucket" >> .env
      - echo "PDF_TO_HTML_BUCKET_ARN=arn:aws:s3:::dummy-pdf-to-html-bucket" >> .env
      - echo "Account:$AWS_ACCOUNT, Region:$AWS_REGION, Project:$PROJECT_NAME"
      - echo "üì¶ Installing CDK dependencies..."
      - npm install
      - echo "üîÑ Bootstrapping CDK environment..."
      - cdk bootstrap
      - echo "‚úÖ CDK bootstrap completed"
  build:
    commands:
      - echo "üìÅ Already in backend directory..."
      - pwd
      - echo "üåê Deploying Amplify infrastructure..."
      - cdk deploy --context deploy=amplify --require-approval never
      - echo "‚úÖ Amplify infrastructure deployed"
      - echo "üìù Verifying stack outputs..."
      # Use the correct stack name pattern from your script
      - aws cloudformation describe-stacks --stack-name "${PROJECT_NAME}-AmplifyHostingStack" --query 'Stacks[0].Outputs'
  post_build:
    commands:
      - echo "‚úÖ CDK deployment completed!"
      - echo "üì§ Outputs available via CloudFormation stacks"
      # Export key outputs for potential use by subsequent builds
      - |
        export AMPLIFY_APP_ID=$(aws cloudformation describe-stacks \
          --stack-name "${PROJECT_NAME}-AmplifyHostingStack" \
          --query 'Stacks[0].Outputs[?OutputKey==`AmplifyAppId`].OutputValue' \
          --output text 2>/dev/null)
        echo "Amplify App ID: $AMPLIFY_APP_ID"
        if [ "$AMPLIFY_APP_ID" != "None" ] && [ -n "$AMPLIFY_APP_ID" ]; then
          echo "‚úÖ Successfully deployed Amplify App: $AMPLIFY_APP_ID"
          echo "üåê Amplify URL: https://main.$AMPLIFY_APP_ID.amplifyapp.com"
        else
          echo "‚ùå Could not retrieve Amplify App ID"
          exit 1
        fi